1. Give two possible reasons for storing the true/false answers as bits in an 8-bit number instead of an array.
Answer: (1) In C++, the size of boolean variable is 1 byte, and the size of the array storing eight boolean values is eight bytes. However, we only consume 1 byte to store all eight answers by using an 8-bit number. (2) An 8-bit number is easy to operate(including initialize, passing to functions, and so on). C++ provides a bunch of useful bitwise operations, allowing us to easily get a certain bit and manipulate the number.

2. To double a score you *could* multiply by two. Why would you use bit manipulation instead? Why would you NOT use bit manipulation instead?
Answer: I would use bit manipulation because it can be faster than arithmetic operations. I would not use bit manipulation because is makes the code less readable and more error-prone. Bit manipulation offers both pros and cons. Its usage should be determined based on the specific context and requirements at hand.

3. Thinking about how you managed to randomly ask your questions yet not repeat them, what is the advantage of using a byte for this vs. other methods. Explain in detail.
Answer: I initialized a short variable named "asked" to store the questions that have been asked. If the n-th question is asked, the n-th bit (start from 0, from right) is modified to 1. At the beginning of the loop, a random number from 0 to 7, which serves as the index of question, is created. Then use bitwise operation to test whether the question has been asked. If it has been asked, regenerate a random number by continuing the loop; otherwise, the question is prompted. If the value of "asked" equals to 255, which indicates that all eight questions are asked, stop the loop. The most noticeable advantage of this method over others is that we don't have to test whether all questions have been asked using a for-loop at the beginning of each loop. If we use an array to store eight boolean values to represent whether the questions have been asked, we may need to check one by one to test whether all questions have been asked.